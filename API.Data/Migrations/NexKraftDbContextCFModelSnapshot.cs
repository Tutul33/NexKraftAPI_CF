// <auto-generated />
using System;
using API.DataAccess.ORM.CodeFirst;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.DataAccess.Migrations
{
    [DbContext(typeof(NexKraftDbContextCF))]
    partial class NexKraftDbContextCFModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Dhaka,Bangladesh",
                            Country = "",
                            Dob = new DateTime(2057, 7, 29, 11, 3, 39, 779, DateTimeKind.Local).AddTicks(2060),
                            Email = "tutulcou@gmail.com",
                            FileExtension = "jpg",
                            FilePath = "FB_IMG_1602836847801_20230430151425779.jpg",
                            FirstName = "Tutul",
                            FullName = "Tutul Chakma",
                            IsActive = true,
                            LastName = "Chakma",
                            Phone = "01914570198"
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubParent")
                        .HasColumnType("bit");

                    b.Property<string>("MenuIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuSequence")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubParentId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fas fa-tachometer-alt",
                            MenuName = "Home",
                            MenuPath = "/",
                            MenuSequence = 1,
                            ModuleId = 1,
                            ParentId = 0,
                            SubParentId = 0
                        },
                        new
                        {
                            MenuId = 2,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fa fa-user",
                            MenuName = "Users",
                            MenuPath = "/users",
                            MenuSequence = 1,
                            ModuleId = 2,
                            ParentId = 0,
                            SubParentId = 0
                        },
                        new
                        {
                            MenuId = 3,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fas fa-columns",
                            MenuName = "Modules",
                            MenuPath = "/modules",
                            MenuSequence = 1,
                            ModuleId = 3,
                            ParentId = 0,
                            SubParentId = 0
                        },
                        new
                        {
                            MenuId = 4,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fa fa-bars",
                            MenuName = "Menus",
                            MenuPath = "/modules/menus",
                            MenuSequence = 2,
                            ModuleId = 3,
                            ParentId = 3,
                            SubParentId = 0
                        },
                        new
                        {
                            MenuId = 5,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fa fa-lock",
                            MenuName = "Permissions",
                            MenuPath = "/modules/permissions",
                            MenuSequence = 3,
                            ModuleId = 3,
                            ParentId = 3,
                            SubParentId = 0
                        },
                        new
                        {
                            MenuId = 6,
                            IsActive = true,
                            IsSubParent = false,
                            MenuIcon = "fa fa-tasks",
                            MenuName = "Roles",
                            MenuPath = "/roles",
                            MenuSequence = 1,
                            ModuleId = 4,
                            ParentId = 0,
                            SubParentId = 0
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.MenuPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<bool?>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanView")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuPermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 1,
                            RoleId = 1,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 2,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 2,
                            RoleId = 1,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 3,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 3,
                            RoleId = 1,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 4,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 4,
                            RoleId = 1,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 5,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 1,
                            RoleId = 2,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 6,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 2,
                            RoleId = 2,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 7,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 3,
                            RoleId = 2,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 8,
                            CanCreate = false,
                            CanDelete = false,
                            CanEdit = false,
                            CanView = false,
                            IsActive = true,
                            MenuId = 1,
                            RoleId = 3,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 9,
                            CanCreate = false,
                            CanDelete = false,
                            CanEdit = false,
                            CanView = false,
                            IsActive = true,
                            MenuId = 2,
                            RoleId = 3,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 10,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 5,
                            RoleId = 1,
                            UserId = 0
                        },
                        new
                        {
                            PermissionId = 11,
                            CanCreate = true,
                            CanDelete = true,
                            CanEdit = true,
                            CanView = true,
                            IsActive = true,
                            MenuId = 6,
                            RoleId = 1,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModulePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModuleSequence")
                        .HasColumnType("int");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            Description = "Dashboard",
                            IsActive = true,
                            ModuleColor = "",
                            ModuleIcon = "fas fa-tachometer-alt",
                            ModuleName = "Dashboard",
                            ModulePath = "/",
                            ModuleSequence = 1
                        },
                        new
                        {
                            ModuleId = 2,
                            Description = "User Management",
                            IsActive = true,
                            ModuleColor = "",
                            ModuleIcon = "fa fa-user",
                            ModuleName = "User Management",
                            ModulePath = "/users",
                            ModuleSequence = 2
                        },
                        new
                        {
                            ModuleId = 3,
                            Description = "Module Management",
                            IsActive = true,
                            ModuleColor = "",
                            ModuleIcon = "fas fa-columns",
                            ModuleName = "Module Management",
                            ModulePath = "/modules",
                            ModuleSequence = 4
                        },
                        new
                        {
                            ModuleId = 4,
                            Description = "Role Management",
                            IsActive = true,
                            ModuleColor = "",
                            ModuleIcon = "fa fa-tasks",
                            ModuleName = "Role",
                            ModulePath = "/roles",
                            ModuleSequence = 3
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            RoleName = "SuperAdmin",
                            Sequence = 1
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            RoleName = "Admin",
                            Sequence = 1
                        },
                        new
                        {
                            RoleId = 3,
                            IsActive = true,
                            RoleName = "User",
                            Sequence = 1
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.UserLogin", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserLogins");

                    b.HasData(
                        new
                        {
                            LoginId = 1,
                            CustomerId = 1,
                            HashPassword = "MTIzNDU2",
                            IsActive = true,
                            Password = "123456",
                            UserName = "tutulcou@gmail.com"
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            LoginId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Menu", b =>
                {
                    b.HasOne("API.DataAccess.ORM.CodeFirst.Module", "Module")
                        .WithMany("Menus")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.MenuPermission", b =>
                {
                    b.HasOne("API.DataAccess.ORM.CodeFirst.Menu", "Menu")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.UserLogin", b =>
                {
                    b.HasOne("API.DataAccess.ORM.CodeFirst.Customer", "Customer")
                        .WithMany("UserLogins")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Customer", b =>
                {
                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Menu", b =>
                {
                    b.Navigation("MenuPermissions");
                });

            modelBuilder.Entity("API.DataAccess.ORM.CodeFirst.Module", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
